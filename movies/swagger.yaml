openapi: 3.0.0

paths:
  /movies/{movie_id}:
    get:
      summary: Returns movie info
      parameters:
        - name: movie_id
          in: path
          required: true
          description: movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getMovie/invocations"
        httpMethod: "POST"
    get:
      summary: Returns next movie id
      parameters:
        - name: movie_id
          in: path
          required: true
          description: movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getNextMovieId/invocations"
        httpMethod: "POST"
        
    get:
      summary: Returns room and movie id
      parameters:
        - name: movie_id
          in: path
          required: true
          description: movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getRoomAndMovieID/invocations"
        httpMethod: "POST"
    
    get:
      summary: Returns availability
      parameters:
        - name: movie_id
          in: path
          required: true
          description: movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getAvailability/invocations"
        httpMethod: "POST"
        
    put:
      summary: Saves movie info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actors:
                  type: array
                  items: 
                    type: string
                year:
                  type: string
      parameters:
        - name: movie_id
          in: path
          required: true
          description: movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:putMovie/invocations"
        httpMethod: "POST"

  /roomsPerDay/movie/{movie_id}:
    get:
      summary: Returns movie info
      parameters:
        - name: movie_id
          in: path
          required: true
          description: movie unique id
        - name: date
          in: query
          schema:
            type: string
          description: date of movie
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:roomsPerDay/invocations"
        httpMethod: "POST"